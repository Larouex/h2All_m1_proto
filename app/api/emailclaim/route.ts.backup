import { NextRequest, NextResponse } from "next/server";
import { db } from "@/db";
import { emailClaims } from "@/db/schema";
import { eq } from "drizzle-orm";
import {
  createEmailClaimInsertValues,
  createEmailClaimUpdateValues,
  isValidEmail,
  normalizeEmail,
} from "../../lib/utils/emailClaimUtils";

async function handleEmailClaim(request: NextRequest) {
  console.log("ðŸ“§ EMAIL CLAIM API - Starting request processing");
  
  try {
    const body = await request.json();
    console.log("ðŸ“§ EMAIL CLAIM API - Body parsed successfully");
    
    const { email } = body;
    console.log("ðŸ“§ EMAIL CLAIM API - Received email:", email);

    // Quick validation
    if (!email || typeof email !== 'string' || !email.includes('@')) {
      console.log("ðŸ“§ EMAIL CLAIM API - Basic email validation failed");
      return NextResponse.json(
        { error: "Valid email address is required" },
        { status: 400 }
      );
    }

    console.log("ðŸ“§ EMAIL CLAIM API - Email validation passed, returning success");
    
    // For now, just return success without database operations
    return NextResponse.json({
      success: true,
      email: email,
      message: "Email claim processed successfully (test mode)",
      timestamp: new Date().toISOString()
    });

    // For now, just return success without database operations
    return NextResponse.json({
      success: true,
      email: email,
      message: "Email claim processed successfully (test mode)",
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    console.error("ï¿½ EMAIL CLAIM API - Error processing email claim:", error);
    
    return NextResponse.json(
      { 
        error: "Failed to process email claim",
        details: error instanceof Error ? error.message : "Unknown error"
      },
      { status: 500 }
    );
  }
}
  } catch (error) {
    console.error("ðŸ“§ EMAIL CLAIM API - Error processing email claim:", error);

    // Check for specific database errors
    if (error instanceof Error) {
      console.error("ðŸ“§ EMAIL CLAIM API - Error details:", {
        message: error.message,
        stack: error.stack?.substring(0, 500),
        name: error.name,
      });

      // Database connection errors
      if (
        error.message.includes("connect") ||
        error.message.includes("connection")
      ) {
        return NextResponse.json(
          {
            error:
              "Database connection failed. Please check your database configuration.",
            code: "DATABASE_CONNECTION_ERROR",
            details: error.message,
          },
          { status: 503 }
        );
      }

      // Table doesn't exist error
      if (error.message.includes('relation "email_claims" does not exist')) {
        return NextResponse.json(
          {
            error:
              "Email claims system is not yet initialized. Please contact support.",
            code: "TABLE_NOT_EXISTS",
          },
          { status: 503 }
        );
      }
    }

    // Check if it's a table doesn't exist error
    if (
      error instanceof Error &&
      error.message.includes('relation "email_claims" does not exist')
    ) {
      return NextResponse.json(
        {
          error:
            "Email claims system is not yet initialized. Please contact support.",
          code: "TABLE_NOT_EXISTS",
        },
        { status: 503 }
      );
    }

    return NextResponse.json(
      { error: "Failed to process email claim" },
      { status: 500 }
    );
  }
}

// Export POST handler
export const POST = handleEmailClaim;

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const email = searchParams.get("email");

    if (!email) {
      return NextResponse.json(
        { error: "Email parameter is required" },
        { status: 400 }
      );
    }

    // Get email claim data
    const claim = await db
      .select()
      .from(emailClaims)
      .where(eq(emailClaims.email, email))
      .limit(1);

    if (claim.length === 0) {
      return NextResponse.json(
        { error: "Email claim not found" },
        { status: 404 }
      );
    }

    return NextResponse.json({
      email: claim[0].email,
      claimCount: claim[0].claimCount,
      createdAt: claim[0].createdAt,
      updatedAt: claim[0].updatedAt,
    });
  } catch (error) {
    console.error("Error fetching email claim:", error);
    return NextResponse.json(
      { error: "Failed to fetch email claim" },
      { status: 500 }
    );
  }
}
