name: Deploy to Azure App Service

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Build Next.js app
        run: npm run build
        env:
          NODE_ENV: production
          AZURE_STORAGE_ACCOUNT_NAME: ${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}
          AZURE_STORAGE_ACCOUNT_KEY: ${{ secrets.AZURE_STORAGE_ACCOUNT_KEY }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}

      - name: Create deployment package
        run: |
          # Create a clean deployment package without node_modules
          mkdir deploy
          cp -r .next deploy/
          cp -r public deploy/
          cp package.json deploy/
          cp package-lock.json deploy/
          cp next.config.* deploy/ 2>/dev/null || true

          # Copy app directory if it exists
          if [ -d "app" ]; then
            cp -r app deploy/
          fi

          # Copy src directory if it exists
          if [ -d "src" ]; then
            cp -r src deploy/
          fi

          # Create web.config for Next.js on Azure App Service
          cat > deploy/web.config << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <system.webServer>
              <handlers>
                <add name="iisnode" path="app.js" verb="*" modules="iisnode"/>
              </handlers>
              <rewrite>
                <rules>
                  <rule name="NodeInspector" patternSyntax="ECMAScript" stopProcessing="true">
                    <match url="^app.js\/debug[\/]?" />
                  </rule>
                  <rule name="StaticContent">
                    <action type="Rewrite" url="public{REQUEST_URI}"/>
                  </rule>
                  <rule name="DynamicContent">
                    <conditions>
                      <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="True"/>
                    </conditions>
                    <action type="Rewrite" url="app.js"/>
                  </rule>
                </rules>
              </rewrite>
              <iisnode watchedFiles="web.config;*.js"/>
              <security>
                <requestFiltering removeServerHeader="true"/>
              </security>
            </system.webServer>
          </configuration>
          EOF

          # Create app.js entry point for Azure
          cat > deploy/app.js << 'EOF'
          const { createServer } = require('http')
          const { parse } = require('url')
          const next = require('next')

          const dev = process.env.NODE_ENV !== 'production'
          const hostname = 'localhost'
          const port = process.env.PORT || 3000

          const app = next({ dev, hostname, port })
          const handle = app.getRequestHandler()

          app.prepare().then(() => {
            createServer(async (req, res) => {
              try {
                const parsedUrl = parse(req.url, true)
                await handle(req, res, parsedUrl)
              } catch (err) {
                console.error('Error occurred handling', req.url, err)
                res.statusCode = 500
                res.end('internal server error')
              }
            })
            .once('error', (err) => {
              console.error(err)
              process.exit(1)
            })
            .listen(port, () => {
              console.log(`> Ready on http://${hostname}:${port}`)
            })
          })
          EOF

          echo "Deployment package contents:"
          ls -la deploy/
          echo "Package size:"
          du -sh deploy/

      - name: Deploy to Azure App Service
        uses: azure/webapps-deploy@v2
        with:
          app-name: "h2all-m1-proto" # Your App Service name
          slot-name: "production"
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: "./deploy"
